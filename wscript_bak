#! /usr/bin/env python
# encoding: utf-8

APPNAME = "FunctionalXpp"
VERSION = "0.0"

top = "."
out = "build"

DIRS = 'source test'
#configuration methods

import glob, os
from waflib.Configure import conf

@conf
def hi(ctx):
        print("-> hello, world!, this is an example of a configuration method.")

#@conf
def global_env(ctx):
        ctx.env.appname = APPNAME
        ctx.env.append_unique('LDFLAGS_N',
                              ['rt', 'pthread', 'm', 'z',
                               'bz2', 'gsl', 'gslcblas',
                               'dl', 'stdc++']
        )
        #ctx.env.append_unique('CATCH_PATH', '/usr/local/include/CATCH')
        ctx.env.append_unique('CATCH_PATH', '/home/muchu/libs/Catch/include')
        ctx.env.append_unique('INCLUDES_N',
                              ["../include",
                               "../include/containers",
                               "../include/containers/iterators",
                               "../include/database",
                               "../include/utils",
                               ctx.env.CATCH_PATH[0]
                              ]
        )

def configure_gcc(conf):
        conf.find_program('g++', var='CXX', mandatory = True)
        conf.load("compiler_cxx")
        global_env(conf)
        conf.env.append_unique('STLIB', 'stdc++')
        conf.setenv('release', env=conf.env.derive())
        conf.env.CXXFLAGS = ['-Wall',
                             '-Wno-unknown-pragmas',
                             '-Wextra',
                             '-Wconversion',
                             '-O3',
                             '-std=c++17']
        conf.define('RELEASE', 1)
        print(conf.all_envs['release'])
        print "-----------------------------"

        conf.setenv('debug', env=conf.env.derive())
        conf.env.CXXFLAGS = ['-DDEBUG',
                             '-D_GLIBCXX_DEBUG',
                             '-D_GLIBCXX_DEBUG_PEDANTIC',
                             '-g', '-std=c++17']
        conf.define('DEBUG', 1)
        print(conf.all_envs['debug'])
        print "-----------------------------"

def configure_clang(conf):
        conf.find_program('clang++', var='CXX', mandatory = True)
        conf.load("compiler_cxx")
        conf.find_program('clang', var='CXX', mandatory = True)
        conf.load("compiler_c")
        global_env(conf)
        conf.env.append_unique('STLIB', 'stdc++')
        conf.setenv('release', env=conf.env.derive())
        conf.env.CXXFLAGS = ['-Wall',
                             '-Wextra',
                             '-std=c++14',
                             '-stdlib=libc++',
                             '-O3']
        conf.env.append_unique('LDFLAGS',
                               ['-stdlib=libc++']
        )
        conf.env.append_unique('LIBS',
                               ['c++',
                                'c++abi']
        )
        conf.define('RELEASE', 1)

        conf.setenv('debug', env=conf.env.derive())
        conf.env.CXXFLAGS = ['-g',
                             '-glldb',
                             '-Wdocumentation']
        conf.define('DEBUG', 1)


def options(opt):
        opt.load("compiler_cxx")

        opt.add_option(
                '--clang',
                action = 'store_true',
                default = False,
        )


def configure(conf):
        #from waflib.Tools.compiler_cxx import cxx_compiler
        #conf.env.CXX = "/usr/local/bin/g++" #specify the cxx compiler.
        #conf.env.CXX = "/usr/bin/g++-5" #specify the cxx compiler.
        if conf.options.clang:
                configure_clang(conf)
        else:
                configure_gcc(conf)


def build(bld):
	bld.recurse(DIRS)

from waflib.Build import BuildContext
class release(BuildContext):
        cmd = 'build_release'
        variant = 'release'

class debug(BuildContext):
        cmd = 'build_debug'
        variant = 'debug'
