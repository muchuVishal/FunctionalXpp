#! /usr/bin/env python
# encoding: utf-8

APPNAME = "FunctionalXpp"
VERSION = "0.0"

top = "."
out = "build"

#configuration methods

from waflib.Configure import conf

@conf
def hi(ctx):
	print("-> hello, world!, this is an example of a configuration method.")

def printWithContext(message, ctx, withContext = True):
	if not withContext:
		print message
	else:
		print (message + ". Context %d" %id(ctx))



def options(opt):
	opt.load("compiler_cxx")

def configure(conf):
	conf.load("compiler_cxx")
	conf.check(header_name="stdio.h", features="cxx cxxprogram", mandatory=False)


def describe(ctx):
	print "Eventually this project will contain experiments in Modern C++,\n\
with emphasis on  functional programming.\n\
The project will be built with Waf,\n\
which we begin to learn from the Waf book"
	print "environment is a " + str(type(ctx.env))
	try:
		print(ctx.env)
	except:
		print "No environment in Context"

def build(bld):
	bld.program(source="main.cpp",
                    target="test",
                    includes = ["../src/Util.h"]
	bld.stlib(target="foo", source="b.cpp")

	#just a check if the .c is compiled as c++ when no c compiler is found
	bld.program(features="cxx cxxprogram", source="main.c", target="app2")

	if bld.cmd != "clean":
		from waflib import Logs
		bld.logger = Logs.make_logger("test.log", "build") #to get a clean output
		bld.check(header_name="sadlib.h", features="cxx cxxprogram", mandatory=False)
		bld.logger = None

